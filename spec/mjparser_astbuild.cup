package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, LBRACKET, RBRACKET, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, EQUAL, VOID, CONST, NEW, READ;
terminal Integer NUMBER ;
terminal Character CHAR_CONST;
terminal String IDENT, BOOL_CONST;
terminal IF, ELSE;
terminal PLUS, MINUS, MUL, DIV, MOD, INC, DEC, PLUSEQUAL, MINUSEQUAL, MULEQUAL, DIVEQUAL, MODEQUAL;
terminal BREAK, CLASS, ABSTRACT, FOR, EXTENDS, CONTINUE, DOT, IF_EQUAL, IF_NOT_EQUAL, IF_GREATER, IF_GREATER_EQUAL, IF_LESS, IF_LESS_EQUAL, AND, OR;

nonterminal DeclList DeclList;
nonterminal DeclItem DeclItem;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclarations ConstDeclarations;
nonterminal VarDeclList VarDeclList;
nonterminal VarDeclarations VarDeclarations;
nonterminal VarDecl VarDecl;
nonterminal MethodVarDeclList MethodVarDeclList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Assignop Assignop;
nonterminal Addop Addop;
nonterminal AddopLeft AddopLeft;
nonterminal AddopRight AddopRight;
nonterminal Mulop Mulop;
nonterminal MulopLeft MulopLeft;
nonterminal MulopRight MulopRight;
nonterminal Unmatched Unmatched;
nonterminal Matched Matched;
nonterminal RightExpr RightExpr;
nonterminal IfMatchedStmt IfMatchedStmt;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, ExprItem, Factor, ConstDecl, ConstVal, PrintExpr, Cond;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;

DeclList ::= (ProgDecl) DeclList:D1 DeclItem:D2 {: RESULT=new ProgDecl(D1, D2); RESULT.setLine(D1left); :}
			 |(NoDecl) {: RESULT=new NoDecl(); :} /* epsilon */
			 ;

DeclItem ::= ConstDeclList:C1 {: RESULT=new DeclItemDerived1(C1); RESULT.setLine(C1left); :}
			 |
			 VarDeclList:V1 {: RESULT=new DeclItemDerived2(V1); RESULT.setLine(V1left); :}
			 ;

ConstDeclList ::= (ConstDeclarationsList) CONST Type:constType ConstDeclarations:C1 SEMI {: RESULT=new ConstDeclarationsList(constType, C1); RESULT.setLine(constTypeleft); :}
				  ;

ConstDeclarations ::= (ConstDecls) ConstDeclarations:C1 COMMA ConstDecl:C2 {: RESULT=new ConstDecls(C1, C2); RESULT.setLine(C1left); :}
				      |
				      (SingleConstDecl) ConstDecl:C1 {: RESULT=new SingleConstDecl(C1); RESULT.setLine(C1left); :}
				      ;

ConstDecl ::= (ConstDeclaration) IDENT:constName EQUAL ConstVal:val {: RESULT=new ConstDeclaration(constName, val); RESULT.setLine(constNameleft); :};

ConstVal ::= (NumConst) NUMBER:val {: RESULT=new NumConst(val); RESULT.setLine(valleft); :}
			 | 
			 (BoolConst) BOOL_CONST:val {: RESULT=new BoolConst(val); RESULT.setLine(valleft); :}
			 | 
			 (CharConst) CHAR_CONST:val {: RESULT=new CharConst(val); RESULT.setLine(valleft); :}
			 ;

VarDeclList ::= (VarDeclList) Type:varType VarDeclarations:V1 SEMI {: RESULT=new VarDeclList(varType, V1); RESULT.setLine(varTypeleft); :}
				;

VarDeclarations::= (VarDecls) VarDeclarations:V1 COMMA VarDecl:V2 {: RESULT=new VarDecls(V1, V2); RESULT.setLine(V1left); :}
				   |
				   (SingleVarDecl) VarDecl:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :}
				   ;
				
VarDecl ::= (ArrayDecl) IDENT:arrayName LBRACKET RBRACKET {: RESULT=new ArrayDecl(arrayName); RESULT.setLine(arrayNameleft); :}
			|
			(VarDeclSingle) IDENT:varName {: RESULT=new VarDeclSingle(varName); RESULT.setLine(varNameleft); :}
			|
			(ErrorVarDecl) error:e 
			{: parser.report_error("Greska pri deklaraciji promjenjljive. Uspjesno izvrsen oporavak u liniji " + eleft , null); :} {: RESULT=new ErrorVarDecl(); :}	
			;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN MethodVarDeclList:M3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, M3, S4); RESULT.setLine(M1left); :};

MethodVarDeclList ::= (MethodVarParams) VarDeclList:V1 {: RESULT=new MethodVarParams(V1); RESULT.setLine(V1left); :}
					 |(NoMethodVarParams) {: RESULT=new NoMethodVarParams(); :} /* epsilon */
					 ;

MethodTypeName ::= (MethodName) Type:retType IDENT:methName {: RESULT=new MethodName(retType, methName); RESULT.setLine(retTypeleft); :}
			  |
			  (VoidMethod) VOID IDENT:methName {: RESULT=new VoidMethod(methName); RESULT.setLine(methNameleft); :}
			  ;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} | (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParDecl) Type:T1 IDENT:paramName {: RESULT=new FormalParDecl(T1, paramName); RESULT.setLine(T1left); :}
					|
					(ArrayParamDecl) Type:T1 IDENT:paramName LBRACKET RBRACKET {: RESULT=new ArrayParamDecl(T1, paramName); RESULT.setLine(T1left); :}
					;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :} | (UnmachedStmt) Unmatched:U1 {: RESULT=new UnmachedStmt(U1); RESULT.setLine(U1left); :} ;

Unmatched ::= (UnmatchedIf) IF Cond:cond Statement:S1 {: RESULT=new UnmatchedIf(cond, S1); RESULT.setLine(condleft); :} | (UnmatchedIfElse) IF Cond:cond Matched:M1 ELSE Unmatched:U2 {: RESULT=new UnmatchedIfElse(cond, M1, U2); RESULT.setLine(condleft); :};
	
				  
Matched ::= (DesStatement) DesignatorStatement:D1 {: RESULT=new DesStatement(D1); RESULT.setLine(D1left); :}
			|
			(PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :} 
			|
			(PrintExprStatement) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintExprStatement(E1, N2); RESULT.setLine(E1left); :}
			|
			(Read) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new Read(D1); RESULT.setLine(D1left); :}
			|
			(ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			|
			(ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			| 
			(MatchedIf) IF LPAREN Cond:cond RPAREN IfMatchedStmt:I1 ELSE Matched:M2 {: RESULT=new MatchedIf(cond, I1, M2); RESULT.setLine(condleft); :}
			|
			(ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
			;

IfMatchedStmt ::= (IfMatchedStmt) Matched:M1 {: RESULT=new IfMatchedStmt(M1); RESULT.setLine(M1left); :};
			
DesignatorStatement ::= (Assignment) Designator:D1 Assignop:A2 RightExpr:R3 SEMI {: RESULT=new Assignment(D1, A2, R3); RESULT.setLine(D1left); :}
					    |
					    (Inc) Designator:D1 INC SEMI {: RESULT=new Inc(D1); RESULT.setLine(D1left); :}
					    |
					    (Dec) Designator:D1 DEC SEMI {: RESULT=new Dec(D1); RESULT.setLine(D1left); :}
					    |
						(ErrAssignment) error SEMI:l
						{: parser.report_error("Uspjesan oporavak od greske pri dodjeli vrednosti na liniji "+lleft, null); :} {: RESULT=new ErrAssignment(); :}
					    ;

RightExpr ::= (RightSideExpr) Expr:E1 {: RESULT=new RightSideExpr(E1); RESULT.setLine(E1left); :}
			  |
			  (IncAssign) Designator:D1 INC {: RESULT=new IncAssign(D1); RESULT.setLine(D1left); :}
			  |
			  (DecAssign) Designator:D1 DEC {: RESULT=new DecAssign(D1); RESULT.setLine(D1left); :}
			  ;
			  
Cond ::= (AndCond)Expr:E1 AND Expr:E2 {: RESULT=new AndCond(E1, E2); RESULT.setLine(E1left); :}
		 |
		 (Greater)Expr:E1 IF_GREATER Expr:E2 {: RESULT=new Greater(E1, E2); RESULT.setLine(E1left); :}
		 ;
			  
Expr ::= (Expression) ExprItem:items {: RESULT=new Expression(items); RESULT.setLine(itemsleft); :}
		 |
		 (NegativeExpression) MINUS ExprItem:items {: RESULT=new NegativeExpression(items); RESULT.setLine(itemsleft); :}
		 ;			  
			  
ExprItem ::= (AddExpr) ExprItem:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
		 	|
		 	(TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 	;

Term ::= (MulopTerm) Term:T1 Mulop:M2 Factor:t {: RESULT=new MulopTerm(T1, M2, t); RESULT.setLine(T1left); :}
		 |
		 (FactorExpr) Factor:t {: RESULT=new FactorExpr(t); RESULT.setLine(tleft); :}
		 ;

Factor ::= (Const) ConstVal:C1 {: RESULT=new Const(C1); RESULT.setLine(C1left); :}
		   |
		   (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		   |
		   (ExprFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ExprFactor(E1); RESULT.setLine(E1left); :}
		   |
		   (NewType) NEW Type:type {: RESULT=new NewType(type); RESULT.setLine(typeleft); :}
		   |
		   (NewArrayType) NEW Type:type LBRACKET Expr:expr RBRACKET {: RESULT=new NewArrayType(type, expr); RESULT.setLine(typeleft); :}
		   |
		   (FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		   ;


ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
				| 
			   (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
					;

Designator ::= (DesignatorNoExpr) IDENT:name {: RESULT=new DesignatorNoExpr(name); RESULT.setLine(nameleft); :}
			   |
			   (DesignatorExpr) Designator:desig LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorExpr(desig, E1); RESULT.setLine(desigleft); :}
			   ;

Assignop ::= (Assign) EQUAL {: RESULT=new Assign(); :}
			 |
			 (AssignAdd) AddopRight:A1 {: RESULT=new AssignAdd(A1); RESULT.setLine(A1left); :}
			 |
			 (AssignMul) MulopRight:M1 {: RESULT=new AssignMul(M1); RESULT.setLine(M1left); :}		
			 ;	   

Addop ::= (AddopL) AddopLeft:A1 {: RESULT=new AddopL(A1); RESULT.setLine(A1left); :}
		  |
		  (AddopR) AddopRight:A1 {: RESULT=new AddopR(A1); RESULT.setLine(A1left); :}
		  |
		  (EqualR) EQUAL {: RESULT=new EqualR(); :}
		  ;
		  
AddopLeft ::= (Add) PLUS {: RESULT=new Add(); :}
			  |
			  (Sub) MINUS {: RESULT=new Sub(); :}
			  ;	  

AddopRight ::= (AddRight) PLUSEQUAL {: RESULT=new AddRight(); :}
			   |
			   (SubRight) MINUSEQUAL {: RESULT=new SubRight(); :}
			   ;
			   
Mulop ::= (MulopL) MulopLeft:M1 {: RESULT=new MulopL(M1); RESULT.setLine(M1left); :}
		  |
		  (MulopR) MulopRight:M1 {: RESULT=new MulopR(M1); RESULT.setLine(M1left); :}
		  ;			   

MulopLeft ::= (Mul) MUL {: RESULT=new Mul(); :}
		  |
		  (Div) DIV {: RESULT=new Div(); :}
		  |
		  (Mod) MOD {: RESULT=new Mod(); :}
		  ;

MulopRight ::= (MulRight) MULEQUAL {: RESULT=new MulRight(); :}
			   |
			   (DivRight) DIVEQUAL {: RESULT=new DivRight(); :}
			   |
			   (ModRight) MODEQUAL {: RESULT=new ModRight(); :}
			   ;		  
